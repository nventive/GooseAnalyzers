steps:
- task: gitversion/setup@0
  inputs:
    versionSpec: '5.10.1'
  displayName: 'Install GitVersion'

- task: gitversion/execute@0
  inputs:
    useConfigFile: true
    configFilePath: build/gitversion.yml
  displayName: 'Calculate version'

- task: NuGetToolInstaller@1
  displayName: 'Install NuGet $(NUGET_VERSION)'
  inputs:
    versionSpec: $(NUGET_VERSION)
    checkLatest: false

# For some reason, we need to build the package first before any other command (like dotnet pack).
- script: > 
    dotnet build src/GooseAnalyzers/GooseAnalyzers.csproj
    --configuration $(ApplicationConfiguration)
    -p:PackageVersion=$(GitVersion.SemVer)
    -p:ContinousIntegrationBuild=true
  displayName: 'Build $(ApplicationConfiguration)'

- script: > 
    dotnet pack src/GooseAnalyzers/GooseAnalyzers.csproj
    --configuration $(ApplicationConfiguration)
    -p:PackageVersion=$(GitVersion.SemVer)
    -p:ContinousIntegrationBuild=true
    --no-build
  displayName: 'Pack $(ApplicationConfiguration)'

# Note that we specify IsPackable=false otherwise another package with the wrong version is generated by dotnet test.
- script: > 
    dotnet test src
    -p:IsPackable=false
    --configuration $(ApplicationConfiguration)
    --logger trx
    --collect "Code coverage"
  displayName: 'Run tests'

- task: PublishTestResults@2
  displayName: 'Publish test results'
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifact $(ApplicationConfiguration)'
  inputs:
    PathtoPublish: $(PackageOutputPath)
    ArtifactName: $(ArtifactName)
    ArtifactType: Container

- task: PostBuildCleanup@3
  displayName: 'Post-Build cleanup :  Cleanup files to keep build server clean!'
  condition: always()